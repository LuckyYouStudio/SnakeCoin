const { ethers } = require("hardhat");
const fs = require('fs');

async function main() {
    console.log("üöÄ ÈÉ®ÁΩ≤‰ºòÂåñÁâà NumberCoinOptimized ÂêàÁ∫¶...");
    
    // Ëé∑ÂèñÈÉ®ÁΩ≤Ë¥¶Êà∑‰ø°ÊÅØ
    const [deployer] = await ethers.getSigners();
    console.log(`ÈÉ®ÁΩ≤Ë¥¶Êà∑: ${deployer.address}`);
    
    // Ê£ÄÊü•Ë¥¶Êà∑‰ΩôÈ¢ù
    const balance = await ethers.provider.getBalance(deployer.address);
    console.log(`Ë¥¶Êà∑‰ΩôÈ¢ù: ${ethers.formatEther(balance)} ETH`);
    
    // Ëé∑ÂèñÁΩëÁªú‰ø°ÊÅØ
    const network = await ethers.provider.getNetwork();
    console.log(`ÁΩëÁªú: ${network.name} (Chain ID: ${network.chainId})`);
    
    // ÈÉ®ÁΩ≤ÂêàÁ∫¶
    console.log("\nüìã ÈÉ®ÁΩ≤ NumberCoinOptimized ÂêàÁ∫¶...");
    const NumberCoinOptimized = await ethers.getContractFactory("NumberCoinOptimized");
    
    // ‰º∞ÁÆóÈÉ®ÁΩ≤GasË¥πÁî®
    const deploymentData = NumberCoinOptimized.interface.encodeDeploy([]);
    const estimatedGas = await ethers.provider.estimateGas({
        data: deploymentData
    });
    
    const feeData = await ethers.provider.getFeeData();
    const estimatedCost = estimatedGas * feeData.gasPrice;
    
    console.log(`‰º∞ÁÆóÈÉ®ÁΩ≤Gas: ${estimatedGas}`);
    console.log(`‰º∞ÁÆóGas‰ª∑Ê†º: ${ethers.formatUnits(feeData.gasPrice, "gwei")} Gwei`);
    console.log(`‰º∞ÁÆóÈÉ®ÁΩ≤ÊàêÊú¨: ${ethers.formatEther(estimatedCost)} ETH`);
    
    // ÈÉ®ÁΩ≤ÂêàÁ∫¶
    const contract = await NumberCoinOptimized.deploy();
    console.log(`‚úÖ ÈÉ®ÁΩ≤‰∫§ÊòìÂ∑≤ÂèëÈÄÅÔºå‰∫§ÊòìÂìàÂ∏å: ${contract.deploymentTransaction().hash}`);
    console.log("‚è≥ Á≠âÂæÖÂêàÁ∫¶ÈÉ®ÁΩ≤Á°ÆËÆ§...");
    
    await contract.waitForDeployment();
    const contractAddress = await contract.getAddress();
    console.log(`‚úÖ NumberCoinOptimized ÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäüÔºÅ`);
    console.log(`ÂêàÁ∫¶Âú∞ÂùÄ: ${contractAddress}`);
    
    // Ëé∑ÂèñÈÉ®ÁΩ≤Âå∫Âùó‰ø°ÊÅØ
    const deploymentTx = await ethers.provider.getTransaction(contract.deploymentTransaction().hash);
    const deploymentReceipt = await ethers.provider.getTransactionReceipt(contract.deploymentTransaction().hash);
    
    console.log(`Âå∫ÂùóÈ´òÂ∫¶: ${deploymentReceipt.blockNumber}`);
    console.log(`ÂÆûÈôÖGas‰ΩøÁî®: ${deploymentReceipt.gasUsed}`);
    console.log(`ÂÆûÈôÖÈÉ®ÁΩ≤ÊàêÊú¨: ${ethers.formatEther(deploymentReceipt.gasUsed * deploymentTx.gasPrice)} ETH`);
    
    // È™åËØÅÂêàÁ∫¶ÈÉ®ÁΩ≤
    console.log("\nüîç È™åËØÅÂêàÁ∫¶ÈÉ®ÁΩ≤...");
    const code = await ethers.provider.getCode(contractAddress);
    if (code === "0x") {
        throw new Error("‚ùå ÂêàÁ∫¶ÈÉ®ÁΩ≤Â§±Ë¥•ÔºåÂêàÁ∫¶Âú∞ÂùÄÊ≤°Êúâ‰ª£Á†Å");
    }
    console.log(`‚úÖ ÂêàÁ∫¶‰ª£Á†ÅÈ™åËØÅÊàêÂäüÔºå‰ª£Á†ÅÈïøÂ∫¶: ${code.length}`);
    
    // ÊµãËØïÂêàÁ∫¶ÂäüËÉΩ
    console.log("\nüìä ÊµãËØïÂêàÁ∫¶Âü∫Êú¨ÂäüËÉΩ...");
    try {
        const name = await contract.name();
        const symbol = await contract.symbol();
        const maxSupply = await contract.MAX_SUPPLY();
        const lotteryPrice = await contract.lotteryPrice();
        const totalSupply = await contract.totalSupply();
        const remaining = await contract.remainingSupply();
        
        console.log(`ÂêàÁ∫¶ÂêçÁß∞: ${name}`);
        console.log(`ÂêàÁ∫¶Á¨¶Âè∑: ${symbol}`);
        console.log(`ÊúÄÂ§ß‰æõÂ∫îÈáè: ${maxSupply}`);
        console.log(`ÊäΩÂ•ñ‰ª∑Ê†º: ${ethers.formatEther(lotteryPrice)} ETH`);
        console.log(`ÂΩìÂâçÈì∏ÈÄ†: ${totalSupply}`);
        console.log(`Ââ©‰ΩôÊï∞Èáè: ${remaining}`);
        
        console.log("‚úÖ ÂêàÁ∫¶ÂäüËÉΩÊµãËØïÈÄöËøá");
    } catch (error) {
        console.error("‚ùå ÂêàÁ∫¶ÂäüËÉΩÊµãËØïÂ§±Ë¥•:", error.message);
    }
    
    // ÂØπÊØîGas‰ΩøÁî®ÊÉÖÂÜµ
    console.log("\n‚ö° Gas‰ΩøÁî®ÂØπÊØî:");
    console.log(`- ‰ºòÂåñÁâàÈÉ®ÁΩ≤Gas: ${deploymentReceipt.gasUsed}`);
    console.log(`- ÂéüÁâà‰º∞ÁÆóGas: ~2,545,966`);
    const gasUsedNum = Number(deploymentReceipt.gasUsed);
    console.log(`- GasËäÇÁúÅ: ${((2545966 - gasUsedNum) / 2545966 * 100).toFixed(1)}%`);
    
    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    const deploymentInfo = {
        contractName: "NumberCoinOptimized",
        contractAddress: contractAddress,
        deployerAddress: deployer.address,
        network: network.name,
        chainId: Number(network.chainId),
        blockNumber: deploymentReceipt.blockNumber,
        transactionHash: contract.deploymentTransaction().hash,
        deploymentTime: new Date().toISOString(),
        gasUsed: deploymentReceipt.gasUsed.toString(),
        gasCost: ethers.formatEther(deploymentReceipt.gasUsed * deploymentTx.gasPrice),
        maxSupply: "10000000",
        lotteryPrice: "0.0001",
        optimizations: [
            "ÁßªÈô§È¢ÑÂàÜÈÖçÊ±†Â≠ê",
            "ÊáíÂä†ËΩΩÊï∞Â≠óÁîüÊàê",
            "ÁÆÄÂåñÁä∂ÊÄÅÂèòÈáè",
            "‰ºòÂåñÈöèÊú∫Êï∞ÁîüÊàê"
        ]
    };
    
    const deploymentFile = `./deployment-optimized-${network.name}.json`;
    fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));
    console.log(`\nüíæ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞ ${deploymentFile}`);
    
    // ËæìÂá∫ÈÉ®ÁΩ≤ÊÄªÁªì
    console.log("\nüéâ ‰ºòÂåñÁâàÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ");
    console.log("==================================================");
    console.log(`NumberCoinOptimized ÂêàÁ∫¶Âú∞ÂùÄ: ${contractAddress}`);
    console.log(`ÁΩëÁªú: ${network.name} (${network.chainId})`);
    console.log(`Âå∫ÂùóÈ´òÂ∫¶: ${deploymentReceipt.blockNumber}`);
    if (network.name === 'sepolia') {
        console.log(`Etherscan: https://sepolia.etherscan.io/address/${contractAddress}`);
    }
    console.log("==================================================");
    
    console.log("\n‚ú® ‰ºòÂåñÁâπÊÄß:");
    console.log("- ‚ùå Êó†ÈúÄÈ¢ÑÂàÜÈÖçÊ±†Â≠êÂàùÂßãÂåñ");
    console.log("- ‚ö° ÊáíÂä†ËΩΩÊï∞Â≠óÁîüÊàê");
    console.log("- üí∞ Â§ßÂπÖÈôç‰ΩéGasË¥πÁî®");
    console.log("- üéØ ‰øùÊåÅÁõ∏ÂêåÂäüËÉΩ");
    
    console.log("\nüìù ‰∏ã‰∏ÄÊ≠•:");
    console.log("1. È™åËØÅÂêàÁ∫¶Ê∫ê‰ª£Á†Å (Â¶ÇÊûúÂú®ÊµãËØïÁΩë)");
    console.log("2. Êõ¥Êñ∞ÂâçÁ´ØÈÖçÁΩÆ‰∏≠ÁöÑÂêàÁ∫¶Âú∞ÂùÄ");
    console.log("3. ÊµãËØïÊäΩÂ•ñÂäüËÉΩ");
    
    if (network.name === 'sepolia') {
        console.log("\nüîß È™åËØÅÂêàÁ∫¶ÂëΩ‰ª§:");
        console.log(`npx hardhat verify --network sepolia ${contractAddress}`);
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    });